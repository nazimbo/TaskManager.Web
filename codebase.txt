This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-02T22:15:33.346Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
Controllers/
  HomeController.cs
  TodoTaskController.cs
Models/
  Domain/
    TodoTask.cs
  ViewModels/
    TodoTaskViewModel.cs
  ErrorViewModel.cs
Repositories/
  Interfaces/
    ITodoTaskRepository.cs
  TodoTaskRepository.cs
Services/
  Interfaces/
    ITodoTaskService.cs
  TodoTaskService.cs
Views/
  Home/
    Index.cshtml
    Privacy.cshtml
  Shared/
    _AlertsPartial.cshtml
    _FooterPartial.cshtml
    _Layout.cshtml
    _Layout.cshtml.css
    _NavbarPartial.cshtml
    _ValidationScriptsPartial.cshtml
    Error.cshtml
  TodoTask/
    Create.cshtml
    Details.cshtml
    Edit.cshtml
    Index.cshtml
  _ViewImports.cshtml
  _ViewStart.cshtml
wwwroot/
  css/
    site.css
  js/
    site.js
    themeInit.js
    themeToggle.js
Program.cs

================================================================
Repository Files
================================================================

================
File: Controllers/HomeController.cs
================
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using TaskManager.Web.Models;

namespace TaskManager.Web.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}

================
File: Controllers/TodoTaskController.cs
================
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using TaskManager.Web.Models.Domain;
using TaskManager.Web.Services.Interfaces;

namespace TaskManager.Web.Controllers
{
    public class TodoTaskController : Controller
    {
        private readonly ITodoTaskService _taskService;
        private readonly ILogger<TodoTaskController> _logger;

        public TodoTaskController(ITodoTaskService taskService, ILogger<TodoTaskController> logger)
        {
            _taskService = taskService;
            _logger = logger;
        }

        // GET: TodoTask
        public async Task<IActionResult> Index()
        {
            var tasks = await _taskService.GetAllTasksAsync();
            return View(tasks);
        }

        // GET: TodoTask/Details/5
        public async Task<IActionResult> Details(int id)
        {
            try
            {
                var task = await _taskService.GetTaskByIdAsync(id);
                return View(task);
            }
            catch (KeyNotFoundException)
            {
                _logger.LogWarning($"Task with ID {id} was not found.");
                return NotFound();
            }
        }

        // GET: TodoTask/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: TodoTask/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Title,Description,DueDate")] TodoTask task)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    await _taskService.CreateTaskAsync(task);
                    _logger.LogInformation($"Task created successfully: {task.Title}");
                    return RedirectToAction(nameof(Index));
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error creating task: {ex.Message}");
                    ModelState.AddModelError("", "Unable to create task. Please try again.");
                }
            }
            return View(task);
        }

        // GET: TodoTask/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            try
            {
                var task = await _taskService.GetTaskByIdAsync(id);
                return View(task);
            }
            catch (KeyNotFoundException)
            {
                return NotFound();
            }
        }

        // POST: TodoTask/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Title,Description,DueDate,IsCompleted")] TodoTask task)
        {
            if (id != task.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    await _taskService.UpdateTaskAsync(task);
                    _logger.LogInformation($"Task updated successfully: {task.Title}");
                    return RedirectToAction(nameof(Index));
                }
                catch (KeyNotFoundException)
                {
                    return NotFound();
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error updating task: {ex.Message}");
                    ModelState.AddModelError("", "Unable to update task. Please try again.");
                }
            }
            return View(task);
        }

        // POST: TodoTask/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            try
            {
                await _taskService.DeleteTaskAsync(id);
                _logger.LogInformation($"Task deleted successfully: ID {id}");
                return RedirectToAction(nameof(Index));
            }
            catch (KeyNotFoundException)
            {
                return NotFound();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error deleting task: {ex.Message}");
                return RedirectToAction(nameof(Index));
            }
        }

        // POST: TodoTask/ToggleStatus/5
        [HttpPost]
        public async Task<IActionResult> ToggleStatus(int id)
        {
            try
            {
                await _taskService.ToggleTaskStatusAsync(id);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error toggling task status: {ex.Message}");
                return Json(new { success = false, message = "Unable to update task status." });
            }
        }
    }
}

================
File: Models/Domain/TodoTask.cs
================
// Models/Domain/TodoTask.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace TaskManager.Web.Models.Domain
{
    public class TodoTask
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Title { get; set; }

        [StringLength(500)]
        public string Description { get; set; }

        public DateTime DueDate { get; set; }

        public bool IsCompleted { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime? UpdatedAt { get; set; }
    }
}

================
File: Models/ViewModels/TodoTaskViewModel.cs
================
using System;
using System.ComponentModel.DataAnnotations;

namespace TaskManager.Web.Models.ViewModels
{
    public class TodoTaskViewModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, ErrorMessage = "Title cannot be longer than 100 characters")]
        [Display(Name = "Task Title")]
        public string Title { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
        [Display(Name = "Description")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Due date is required")]
        [Display(Name = "Due Date")]
        [DataType(DataType.Date)]
        public DateTime DueDate { get; set; }

        [Display(Name = "Completed")]
        public bool IsCompleted { get; set; }

        [Display(Name = "Created")]
        public DateTime CreatedAt { get; set; }

        [Display(Name = "Last Updated")]
        public DateTime? UpdatedAt { get; set; }
    }

    public class CreateTodoTaskViewModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, ErrorMessage = "Title cannot be longer than 100 characters")]
        [Display(Name = "Task Title")]
        public string Title { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
        [Display(Name = "Description")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Due date is required")]
        [Display(Name = "Due Date")]
        [DataType(DataType.Date)]
        public DateTime DueDate { get; set; } = DateTime.Today.AddDays(1);
    }
}

================
File: Models/ErrorViewModel.cs
================
namespace TaskManager.Web.Models;

public class ErrorViewModel
{
    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
}

================
File: Repositories/Interfaces/ITodoTaskRepository.cs
================
using System.Collections.Generic;
using System.Threading.Tasks;
using TaskManager.Web.Models.Domain;

namespace TaskManager.Web.Repositories.Interfaces
{
    public interface ITodoTaskRepository
    {
        Task<IEnumerable<TodoTask>> GetAllAsync();
        Task<TodoTask> GetByIdAsync(int id);
        Task<TodoTask> CreateAsync(TodoTask task);
        Task UpdateAsync(TodoTask task);
        Task DeleteAsync(int id);
        Task<bool> ExistsAsync(int id);
    }
}

================
File: Repositories/TodoTaskRepository.cs
================
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using TaskManager.Web.Infrastructure.Data;
using TaskManager.Web.Models.Domain;
using TaskManager.Web.Repositories.Interfaces;

namespace TaskManager.Web.Repositories
{
    public class TodoTaskRepository : ITodoTaskRepository
    {
        private readonly ApplicationDbContext _context;

        public TodoTaskRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<TodoTask>> GetAllAsync()
        {
            return await _context.Tasks
                .OrderByDescending(t => t.CreatedAt)
                .ToListAsync();
        }

        public async Task<TodoTask> GetByIdAsync(int id)
        {
            return await _context.Tasks.FindAsync(id);
        }

        public async Task<TodoTask> CreateAsync(TodoTask task)
        {
            _context.Tasks.Add(task);
            await _context.SaveChangesAsync();
            return task;
        }

        public async Task UpdateAsync(TodoTask task)
        {
            task.UpdatedAt = DateTime.UtcNow;
            _context.Tasks.Update(task);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var task = await _context.Tasks.FindAsync(id);
            if (task != null)
            {
                _context.Tasks.Remove(task);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<bool> ExistsAsync(int id)
        {
            return await _context.Tasks.AnyAsync(t => t.Id == id);
        }
    }
}

================
File: Services/Interfaces/ITodoTaskService.cs
================
using System.Collections.Generic;
using System.Threading.Tasks;
using TaskManager.Web.Models.Domain;

namespace TaskManager.Web.Services.Interfaces
{
    public interface ITodoTaskService
    {
        Task<IEnumerable<TodoTask>> GetAllTasksAsync();
        Task<TodoTask> GetTaskByIdAsync(int id);
        Task<TodoTask> CreateTaskAsync(TodoTask task);
        Task UpdateTaskAsync(TodoTask task);
        Task DeleteTaskAsync(int id);
        Task<bool> TaskExistsAsync(int id);
        Task ToggleTaskStatusAsync(int id);
    }
}

================
File: Services/TodoTaskService.cs
================
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using TaskManager.Web.Models.Domain;
using TaskManager.Web.Repositories.Interfaces;
using TaskManager.Web.Services.Interfaces;

namespace TaskManager.Web.Services
{
    public class TodoTaskService : ITodoTaskService
    {
        private readonly ITodoTaskRepository _repository;

        public TodoTaskService(ITodoTaskRepository repository)
        {
            _repository = repository;
        }

        public async Task<IEnumerable<TodoTask>> GetAllTasksAsync()
        {
            return await _repository.GetAllAsync();
        }

        public async Task<TodoTask> GetTaskByIdAsync(int id)
        {
            var task = await _repository.GetByIdAsync(id);
            if (task == null)
            {
                throw new KeyNotFoundException($"Task with ID {id} not found.");
            }
            return task;
        }

        public async Task<TodoTask> CreateTaskAsync(TodoTask task)
        {
            task.CreatedAt = DateTime.UtcNow;
            return await _repository.CreateAsync(task);
        }

        public async Task UpdateTaskAsync(TodoTask task)
        {
            if (!await _repository.ExistsAsync(task.Id))
            {
                throw new KeyNotFoundException($"Task with ID {task.Id} not found.");
            }

            task.UpdatedAt = DateTime.UtcNow;
            await _repository.UpdateAsync(task);
        }

        public async Task DeleteTaskAsync(int id)
        {
            if (!await _repository.ExistsAsync(id))
            {
                throw new KeyNotFoundException($"Task with ID {id} not found.");
            }

            await _repository.DeleteAsync(id);
        }

        public async Task<bool> TaskExistsAsync(int id)
        {
            return await _repository.ExistsAsync(id);
        }

        public async Task ToggleTaskStatusAsync(int id)
        {
            var task = await GetTaskByIdAsync(id);
            task.IsCompleted = !task.IsCompleted;
            task.UpdatedAt = DateTime.UtcNow;
            await _repository.UpdateAsync(task);
        }
    }
}

================
File: Views/Home/Index.cshtml
================
@{
    ViewData["Title"] = "Welcome to Task Manager";
}

<style>
    .btn-lg {
        padding: 0.8rem 1.5rem;
        font-weight: 500;
    }
    
    .feature-icon {
        width: 64px;
        height: 64px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .card {
        transition: transform 0.2s ease-in-out;
    }
    
    .card:hover {
        transform: translateY(-5px);
    }
</style>

<div class="container py-5">
    <div class="row align-items-center g-5">
        <!-- Welcome Section -->
        <div class="col-lg-6">
            <h1 class="display-4 fw-bold mb-4">Organize Your Tasks,<br/>Simplify Your Life</h1>
            <p class="lead mb-4">Stay organized, meet deadlines, and achieve more with our intuitive task management solution. Start managing your tasks effectively today.</p>
            <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                <a asp-controller="TodoTask" asp-action="Index" class="btn btn-primary btn-lg px-4 me-md-2">
                    <i class="bi bi-list-check me-2"></i>View Tasks
                </a>
                <a asp-controller="TodoTask" asp-action="Create" class="btn btn-outline-primary btn-lg px-4">
                    <i class="bi bi-plus-circle me-2"></i>New Task
                </a>
            </div>
        </div>
        
        <!-- Features Section -->
        <div class="col-lg-6">
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 rounded-circle p-3 mb-3 mx-auto" style="width: fit-content;">
                                <i class="bi bi-check2-circle text-primary" style="font-size: 2rem;"></i>
                            </div>
                            <h5 class="card-title">Easy Task Management</h5>
                            <p class="card-text text-muted">Create, update, and track your tasks with just a few clicks.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 rounded-circle p-3 mb-3 mx-auto" style="width: fit-content;">
                                <i class="bi bi-calendar-check text-primary" style="font-size: 2rem;"></i>
                            </div>
                            <h5 class="card-title">Due Date Tracking</h5>
                            <p class="card-text text-muted">Never miss a deadline with our intuitive due date system.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 rounded-circle p-3 mb-3 mx-auto" style="width: fit-content;">
                                <i class="bi bi-laptop text-primary" style="font-size: 2rem;"></i>
                            </div>
                            <h5 class="card-title">Responsive Design</h5>
                            <p class="card-text text-muted">Access your tasks from any device, anywhere, anytime.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 rounded-circle p-3 mb-3 mx-auto" style="width: fit-content;">
                                <i class="bi bi-shield-check text-primary" style="font-size: 2rem;"></i>
                            </div>
                            <h5 class="card-title">Secure & Reliable</h5>
                            <p class="card-text text-muted">Your task data is always secure and backed up.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: Views/Home/Privacy.cshtml
================
@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>

================
File: Views/Shared/_AlertsPartial.cshtml
================
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-circle me-2"></i>
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

================
File: Views/Shared/_FooterPartial.cshtml
================
<footer class="border-top footer text-muted">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                &copy; @DateTime.Now.Year - Task Manager
            </div>
            <div class="col-md-6 text-end">
                <a asp-controller="Home" asp-action="Privacy">Privacy Policy</a>
            </div>
        </div>
    </div>
</footer>

================
File: Views/Shared/_Layout.cshtml
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Task Manager</title>
    
    <!-- Theme initialization - Must be before any other styles -->
    <script src="~/js/themeInit.js"></script>
    
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    
    <!-- Add React and ReactDOM -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-check2-square me-2"></i>Task Manager
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Home" asp-action="Index">
                                <i class="bi bi-house me-1"></i>Home
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="TodoTask" asp-action="Index">
                                <i class="bi bi-list-check me-1"></i>Tasks
                            </a>
                        </li>
                    </ul>
                    <!-- Theme toggle button -->
                    <div id="themeToggle" class="ms-auto me-2"></div>
                </div>
            </div>
        </nav>
    </header>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; @DateTime.Now.Year - Task Manager - <a asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Theme Toggle Component -->
    <script src="~/js/themeToggle.js"></script>
    <script>
        const root = ReactDOM.createRoot(document.getElementById('themeToggle'));
        root.render(React.createElement(ThemeToggle));
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

================
File: Views/Shared/_Layout.cshtml.css
================
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}

================
File: Views/Shared/_NavbarPartial.cshtml
================
<nav class="navbar navbar-expand-sm navbar-light bg-white border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" asp-controller="Home" asp-action="Index">
            <i class="bi bi-check2-square me-2"></i>Task Manager
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-controller="Home" asp-action="Index">
                        <i class="bi bi-house me-1"></i>Home
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-controller="TodoTask" asp-action="Index">
                        <i class="bi bi-list-check me-1"></i>Tasks
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

================
File: Views/Shared/_ValidationScriptsPartial.cshtml
================
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

================
File: Views/Shared/Error.cshtml
================
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8 text-center">
            <div class="error-container">
                <i class="bi bi-exclamation-triangle text-danger" style="font-size: 4rem;"></i>
                <h1 class="text-danger mt-4">Error</h1>
                <h2 class="text-danger h4 mb-4">An error occurred while processing your request.</h2>

                @if (Model.ShowRequestId)
                {
                    <div class="alert alert-info">
                        <strong>Request ID:</strong> <code>@Model.RequestId</code>
                    </div>
                }

                <div class="mt-4">
                    <h3 class="h5">Development Mode</h3>
                    <p class="text-muted">
                        Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
                    </p>
                    <div class="alert alert-warning">
                        <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
                        It can result in displaying sensitive information from exceptions to end users.
                    </div>
                    <p class="text-muted">
                        For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
                        and restarting the app.
                    </p>
                </div>

                <div class="mt-4">
                    <a href="/" class="btn btn-primary">
                        <i class="bi bi-house me-2"></i>Return Home
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: Views/TodoTask/Create.cshtml
================
@model TaskManager.Web.Models.ViewModels.CreateTodoTaskViewModel

@{
    ViewData["Title"] = "Create Task";
}

<style>
    .form-card {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-floating > label {
        padding-left: 1rem;
    }
    
    .form-floating > .form-control {
        padding: 1rem;
        height: calc(3.5rem + 2px);
    }
    
    .form-floating > textarea.form-control {
        height: 100px;
    }
    
    .field-validation-error {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .character-counter {
        font-size: 0.75rem;
        color: #6c757d;
        text-align: right;
        margin-top: 0.25rem;
    }

    .form-section {
        position: relative;
        padding: 2rem;
        margin-bottom: 1rem;
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .form-section-icon {
        position: absolute;
        top: -1rem;
        left: 1rem;
        background: #0d6efd;
        color: white;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-datepicker::-webkit-calendar-picker-indicator {
        background: transparent;
        bottom: 0;
        color: transparent;
        cursor: pointer;
        height: auto;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        width: auto;
    }

    .datepicker-container {
        position: relative;
    }

    .datepicker-icon {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        pointer-events: none;
    }
</style>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="form-card">
                <!-- Header -->
                <div class="text-center mb-4">
                    <h1 class="h3 mb-2">Create New Task</h1>
                    <p class="text-muted">Fill in the details below to create a new task</p>
                </div>

                <form asp-action="Create" id="createTaskForm">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                    <!-- Task Details Section -->
                    <div class="form-section">
                        <div class="form-section-icon">
                            <i class="bi bi-list-check"></i>
                        </div>
                        
                        <!-- Title Field -->
                        <div class="mb-4">
                            <div class="form-floating">
                                <input asp-for="Title" class="form-control" placeholder="Enter task title" maxlength="100" />
                                <label asp-for="Title">
                                    <i class="bi bi-type me-1"></i>Task Title
                                </label>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span asp-validation-for="Title" class="text-danger"></span>
                                <div class="character-counter">
                                    <span id="titleCounter">0</span>/100 characters
                                </div>
                            </div>
                        </div>

                        <!-- Description Field -->
                        <div class="mb-4">
                            <div class="form-floating">
                                <textarea asp-for="Description" class="form-control" 
                                          placeholder="Enter task description" maxlength="500"
                                          style="height: 120px"></textarea>
                                <label asp-for="Description">
                                    <i class="bi bi-card-text me-1"></i>Description
                                </label>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span asp-validation-for="Description" class="text-danger"></span>
                                <div class="character-counter">
                                    <span id="descriptionCounter">0</span>/500 characters
                                </div>
                            </div>
                        </div>

                        <!-- Due Date Field -->
                        <div class="mb-3">
                            <div class="form-floating datepicker-container">
                                <input asp-for="DueDate" class="form-control custom-datepicker" 
                                       type="date" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                <label asp-for="DueDate">
                                    <i class="bi bi-calendar-event me-1"></i>Due Date
                                </label>
                                <div class="datepicker-icon">
                                    <i class="bi bi-calendar3"></i>
                                </div>
                            </div>
                            <span asp-validation-for="DueDate" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="d-flex gap-2 justify-content-center mt-4">
                        <button type="submit" class="btn btn-primary btn-lg px-4">
                            <i class="bi bi-check-lg me-2"></i>Create Task
                        </button>
                        <a asp-action="Index" class="btn btn-outline-secondary btn-lg px-4">
                            <i class="bi bi-x-lg me-2"></i>Cancel
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Character counters
            function updateCharacterCounter(input, counter) {
                const currentLength = input.val().length;
                counter.text(currentLength);
                
                if (currentLength >= parseInt(input.attr('maxlength'))) {
                    counter.addClass('text-danger');
                } else {
                    counter.removeClass('text-danger');
                }
            }

            // Title counter
            const titleInput = $('#Title');
            const titleCounter = $('#titleCounter');
            titleInput.on('input', function() {
                updateCharacterCounter(titleInput, titleCounter);
            });
            updateCharacterCounter(titleInput, titleCounter);

            // Description counter
            const descriptionInput = $('#Description');
            const descriptionCounter = $('#descriptionCounter');
            descriptionInput.on('input', function() {
                updateCharacterCounter(descriptionInput, descriptionCounter);
            });
            updateCharacterCounter(descriptionInput, descriptionCounter);

            // Set minimum date for the date picker
            const today = new Date().toISOString().split('T')[0];
            $('#DueDate').attr('min', today);

            // Custom form validation
            const form = $('#createTaskForm');
            form.on('submit', function(e) {
                if (!form[0].checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Add shake animation to invalid fields
                    $('.is-invalid').closest('.form-section').addClass('animate__animated animate__shakeX');
                    setTimeout(() => {
                        $('.form-section').removeClass('animate__animated animate__shakeX');
                    }, 1000);
                }
                form.addClass('was-validated');
            });
        });
    </script>
}

================
File: Views/TodoTask/Details.cshtml
================
@model TaskManager.Web.Models.Domain.TodoTask

@{
    ViewData["Title"] = "Task Details";
}

<style>
    .details-card {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 1rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        overflow: hidden;
    }

    .header-banner {
        background: linear-gradient(45deg, #0d6efd, #0a58ca);
        padding: 2rem;
        color: white;
        position: relative;
    }

    .status-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-badge.completed {
        background: rgba(25, 135, 84, 0.2);
        color: #fff;
    }

    .status-badge.pending {
        background: rgba(255, 193, 7, 0.2);
        color: #fff;
    }

    .task-title {
        font-size: 1.75rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .meta-info {
        display: flex;
        gap: 1.5rem;
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.875rem;
    }

    .info-section {
        padding: 2rem;
        border-bottom: 1px solid #e9ecef;
    }

    .info-section:last-child {
        border-bottom: none;
    }

    .section-title {
        font-size: 1rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .description-text {
        color: #6c757d;
        line-height: 1.6;
        white-space: pre-wrap;
    }

    .timeline-item {
        position: relative;
        padding-left: 2rem;
        padding-bottom: 1.5rem;
    }

    .timeline-item:before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #dee2e6;
    }

    .timeline-item:last-child {
        padding-bottom: 0;
    }

    .timeline-item:last-child:before {
        display: none;
    }

    .timeline-icon {
        position: absolute;
        left: -0.5rem;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        background: #0d6efd;
        border: 2px solid white;
    }

    .timeline-content {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .timeline-date {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .due-date {
        font-weight: 500;
    }

    .due-date.overdue {
        color: #dc3545;
    }

    .due-date.upcoming {
        color: #ffc107;
    }

    .action-buttons {
        position: sticky;
        bottom: 0;
        background: white;
        padding: 1rem;
        box-shadow: 0 -0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        display: flex;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-icon {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .progress-circle {
        width: 120px;
        height: 120px;
        position: relative;
        background: conic-gradient(
            #0d6efd var(--progress), 
            #e9ecef var(--progress)
        );
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .progress-circle::before {
        content: "";
        position: absolute;
        width: 90px;
        height: 90px;
        background: white;
        border-radius: 50%;
    }

    .progress-value {
        position: relative;
        font-size: 1.5rem;
        font-weight: 600;
        color: #0d6efd;
    }
</style>

<div class="container py-4">
    <div class="details-card">
        <!-- Header Banner -->
        <div class="header-banner">
            <span class="status-badge @(Model.IsCompleted ? "completed" : "pending")">
                @(Model.IsCompleted ? "Completed" : "In Progress")
            </span>
            <h1 class="task-title">@Model.Title</h1>
            <div class="meta-info">
                <span><i class="bi bi-clock me-1"></i>Created @Model.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")</span>
                @if (Model.UpdatedAt.HasValue)
                {
                    <span><i class="bi bi-pencil me-1"></i>Updated @Model.UpdatedAt.Value.ToLocalTime().ToString("MMM dd, yyyy")</span>
                }
            </div>
        </div>

        <!-- Description Section -->
        <div class="info-section">
            <h2 class="section-title">
                <i class="bi bi-card-text"></i>Description
            </h2>
            <p class="description-text">
                @if (string.IsNullOrEmpty(Model.Description))
                {
                    <span class="text-muted fst-italic">No description provided</span>
                }
                else
                {
                    @Model.Description
                }
            </p>
        </div>

        <!-- Due Date & Progress Section -->
        <div class="info-section">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2 class="section-title">
                        <i class="bi bi-calendar-event"></i>Due Date
                    </h2>
                    @{
                        var dueDate = Model.DueDate.Date;
                        var today = DateTime.Today;
                        var daysUntilDue = (dueDate - today).Days;
                        var dueDateClass = daysUntilDue < 0 ? "overdue" : 
                                         daysUntilDue <= 3 ? "upcoming" : "";
                    }
                    <div class="due-date @dueDateClass">
                        <i class="bi @(daysUntilDue < 0 ? "bi-exclamation-circle" : 
                                      daysUntilDue <= 3 ? "bi-exclamation-triangle" : 
                                      "bi-calendar") me-2"></i>
                        @Model.DueDate.ToLocalTime().ToString("MMMM dd, yyyy")
                        @if (daysUntilDue < 0)
                        {
                            <span class="text-danger">(@Math.Abs(daysUntilDue) days overdue)</span>
                        }
                        else if (daysUntilDue == 0)
                        {
                            <span class="text-warning">(Due today)</span>
                        }
                        else
                        {
                            <span class="text-muted">(@daysUntilDue days remaining)</span>
                        }
                    </div>
                </div>
                <div class="col-md-6 text-center">
                    @{
                        var progressValue = Model.IsCompleted ? 100 : 
                            Math.Max(0, Math.Min(100, (1 - (double)daysUntilDue / 30) * 100));
                    }
                    <div class="progress-circle" style="--progress: @(progressValue)%;">
                        <span class="progress-value">@Math.Round(progressValue)%</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Timeline Section -->
        <div class="info-section">
            <h2 class="section-title">
                <i class="bi bi-clock-history"></i>Timeline
            </h2>
            <div class="timeline">
                <div class="timeline-item">
                    <div class="timeline-icon"></div>
                    <div class="timeline-content">
                        <strong>Task Created</strong>
                    </div>
                    <div class="timeline-date">
                        @Model.CreatedAt.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")
                    </div>
                </div>
                @if (Model.UpdatedAt.HasValue)
                {
                    <div class="timeline-item">
                        <div class="timeline-icon"></div>
                        <div class="timeline-content">
                            <strong>Last Modified</strong>
                        </div>
                        <div class="timeline-date">
                            @Model.UpdatedAt.Value.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")
                        </div>
                    </div>
                }
                <div class="timeline-item">
                    <div class="timeline-icon"></div>
                    <div class="timeline-content">
                        <strong>Due Date</strong>
                    </div>
                    <div class="timeline-date">
                        @Model.DueDate.ToLocalTime().ToString("MMMM dd, yyyy")
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary btn-lg btn-icon">
                <i class="bi bi-pencil"></i>Edit
            </a>
            <button type="button" 
                    class="btn btn-danger btn-lg btn-icon"
                    data-bs-toggle="modal" 
                    data-bs-target="#deleteModal" 
                    data-task-id="@Model.Id"
                    data-task-title="@Model.Title">
                <i class="bi bi-trash"></i>Delete
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary btn-lg btn-icon">
                <i class="bi bi-arrow-left"></i>Back
            </a>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <div class="mb-4">
                    <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                </div>
                <h5>Are you sure?</h5>
                <p class="text-muted">
                    Do you really want to delete the task:<br>
                    <strong><span id="taskTitle"></span></strong>?<br>
                    This action cannot be undone.
                </p>
            </div>
            <div class="modal-footer border-0">
                <form asp-action="Delete" id="deleteForm">
                    <input type="hidden" name="id" id="taskId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger btn-icon">
                        <i class="bi bi-trash"></i>Delete Task
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle delete modal
            $('#deleteModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const taskId = button.data('task-id');
                const taskTitle = button.data('task-title');
                
                const modal = $(this);
                modal.find('#taskId').val(taskId);
                modal.find('#taskTitle').text(taskTitle);
            });
        });
    </script>
}

================
File: Views/TodoTask/Edit.cshtml
================
@model TaskManager.Web.Models.Domain.TodoTask

@{
    ViewData["Title"] = "Edit Task";
}

<style>
    .form-card {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-floating > label {
        padding-left: 1rem;
    }
    
    .form-floating > .form-control {
        padding: 1rem;
        height: calc(3.5rem + 2px);
    }
    
    .form-floating > textarea.form-control {
        height: 100px;
    }
    
    .character-counter {
        font-size: 0.75rem;
        color: #6c757d;
        text-align: right;
        margin-top: 0.25rem;
    }

    .form-section {
        position: relative;
        padding: 2rem;
        margin-bottom: 1rem;
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .form-section-header {
        position: absolute;
        top: -1rem;
        left: 1rem;
        background: #0d6efd;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .custom-datepicker::-webkit-calendar-picker-indicator {
        background: transparent;
        bottom: 0;
        color: transparent;
        cursor: pointer;
        height: auto;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        width: auto;
    }

    .datepicker-container {
        position: relative;
    }

    .datepicker-icon {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        pointer-events: none;
    }

    .status-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .status-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .status-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .status-slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .status-slider {
        background-color: #198754;
    }

    input:checked + .status-slider:before {
        transform: translateX(26px);
    }

    .task-info {
        font-size: 0.875rem;
        color: #6c757d;
    }
</style>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="form-card">
                <!-- Header -->
                <div class="text-center mb-4">
                    <h1 class="h3 mb-2">Edit Task</h1>
                    <p class="text-muted">Update your task details below</p>
                </div>

                <form asp-action="Edit" id="editTaskForm">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="CreatedAt" />

                    <!-- Task Status Section -->
                    <div class="form-section mb-4">
                        <div class="form-section-header">
                            <i class="bi bi-check2-circle"></i>Task Status
                        </div>
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h6 class="mb-1">Mark as Completed</h6>
                                <p class="text-muted mb-0 small">Toggle to mark this task as done</p>
                            </div>
                            <label class="status-switch">
                                <input type="checkbox" asp-for="IsCompleted">
                                <span class="status-slider"></span>
                            </label>
                        </div>
                    </div>

                    <!-- Task Details Section -->
                    <div class="form-section mb-4">
                        <div class="form-section-header">
                            <i class="bi bi-pencil-square"></i>Task Details
                        </div>
                        
                        <!-- Title Field -->
                        <div class="mb-4">
                            <div class="form-floating">
                                <input asp-for="Title" class="form-control" placeholder="Enter task title" maxlength="100" />
                                <label asp-for="Title">
                                    <i class="bi bi-type me-1"></i>Task Title
                                </label>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span asp-validation-for="Title" class="text-danger"></span>
                                <div class="character-counter">
                                    <span id="titleCounter">0</span>/100 characters
                                </div>
                            </div>
                        </div>

                        <!-- Description Field -->
                        <div class="mb-4">
                            <div class="form-floating">
                                <textarea asp-for="Description" class="form-control" 
                                          placeholder="Enter task description" maxlength="500"
                                          style="height: 120px"></textarea>
                                <label asp-for="Description">
                                    <i class="bi bi-card-text me-1"></i>Description
                                </label>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span asp-validation-for="Description" class="text-danger"></span>
                                <div class="character-counter">
                                    <span id="descriptionCounter">0</span>/500 characters
                                </div>
                            </div>
                        </div>

                        <!-- Due Date Field -->
                        <div class="mb-3">
                            <div class="form-floating datepicker-container">
                                <input asp-for="DueDate" class="form-control custom-datepicker" 
                                       type="date" />
                                <label asp-for="DueDate">
                                    <i class="bi bi-calendar-event me-1"></i>Due Date
                                </label>
                                <div class="datepicker-icon">
                                    <i class="bi bi-calendar3"></i>
                                </div>
                            </div>
                            <span asp-validation-for="DueDate" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Task Information Section -->
                    <div class="form-section mb-4">
                        <div class="form-section-header">
                            <i class="bi bi-info-circle"></i>Task Information
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="task-info">
                                    <i class="bi bi-clock-history me-2"></i>Created:
                                    <span class="fw-medium">@Model.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                            @if (Model.UpdatedAt.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="task-info">
                                        <i class="bi bi-pencil me-2"></i>Last Updated:
                                        <span class="fw-medium">@Model.UpdatedAt.Value.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="d-flex gap-2 justify-content-center mt-4">
                        <button type="submit" class="btn btn-primary btn-lg px-4">
                            <i class="bi bi-save me-2"></i>Save Changes
                        </button>
                        <a asp-action="Index" class="btn btn-outline-secondary btn-lg px-4">
                            <i class="bi bi-x-lg me-2"></i>Cancel
                        </a>
                        <button type="button" class="btn btn-outline-danger btn-lg px-4"
                                data-bs-toggle="modal" 
                                data-bs-target="#deleteModal" 
                                data-task-id="@Model.Id"
                                data-task-title="@Model.Title">
                            <i class="bi bi-trash me-2"></i>Delete
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                <h5 class="mt-3">Are you sure?</h5>
                <p class="text-muted mb-0">Do you want to delete task: <strong><span id="taskTitle"></span></strong>?<br>This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0">
                <form asp-action="Delete" id="deleteForm">
                    <input type="hidden" name="id" id="taskId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-2"></i>Delete Task
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Character counters
            function updateCharacterCounter(input, counter) {
                const currentLength = input.val().length;
                counter.text(currentLength);
                
                if (currentLength >= parseInt(input.attr('maxlength'))) {
                    counter.addClass('text-danger');
                } else {
                    counter.removeClass('text-danger');
                }
            }

            // Title counter
            const titleInput = $('#Title');
            const titleCounter = $('#titleCounter');
            titleInput.on('input', function() {
                updateCharacterCounter(titleInput, titleCounter);
            });
            updateCharacterCounter(titleInput, titleCounter);

            // Description counter
            const descriptionInput = $('#Description');
            const descriptionCounter = $('#descriptionCounter');
            descriptionInput.on('input', function() {
                updateCharacterCounter(descriptionInput, descriptionCounter);
            });
            updateCharacterCounter(descriptionInput, descriptionCounter);

            // Handle delete modal
            $('#deleteModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const taskId = button.data('task-id');
                const taskTitle = button.data('task-title');
                
                const modal = $(this);
                modal.find('#taskId').val(taskId);
                modal.find('#taskTitle').text(taskTitle);
            });

            // Custom form validation
            const form = $('#editTaskForm');
            form.on('submit', function(e) {
                if (!form[0].checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Add shake animation to invalid fields
                    $('.is-invalid').closest('.form-section').addClass('animate__animated animate__shakeX');
                    setTimeout(() => {
                        $('.form-section').removeClass('animate__animated animate__shakeX');
                    }, 1000);
                }
                form.addClass('was-validated');
            });

            // Unsaved changes warning
            let formChanged = false;
            const originalForm = form.serialize();

            form.on('change input', function() {
                formChanged = form.serialize() !== originalForm;
            });

            $(window).on('beforeunload', function(e) {
                if (formChanged) {
                    return 'You have unsaved changes. Are you sure you want to leave?';
                }
            });

            form.on('submit', function() {
                formChanged = false;
            });
        });
    </script>
}

================
File: Views/TodoTask/Index.cshtml
================
@model IEnumerable<TaskManager.Web.Models.Domain.TodoTask>

@{
    ViewData["Title"] = "Tasks";
}

<style>
    .task-card {
        transition: all 0.2s ease-in-out;
    }
    
    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.1)!important;
    }

    .due-date {
        font-size: 0.875rem;
    }

    .due-date.overdue {
        color: #dc3545;
    }

    .due-date.upcoming {
        color: #ffc107;
    }

    .completed-task {
        opacity: 0.7;
    }

    .task-checkbox {
        width: 1.4rem;
        height: 1.4rem;
        cursor: pointer;
    }

    .task-actions {
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
    }

    .task-card:hover .task-actions {
        opacity: 1;
    }

    .status-badge {
        font-size: 0.75rem;
        padding: 0.4em 0.8em;
    }

    .task-title {
        color: #2c3e50;
        text-decoration: none;
    }

    .task-title:hover {
        color: #0d6efd;
    }

    .completed-task .task-title {
        text-decoration: line-through;
        color: #6c757d;
    }
</style>

<div class="container py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-2">My Tasks</h1>
            <p class="text-muted mb-0">Manage and track your tasks effectively</p>
        </div>
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-lg me-2"></i>New Task
        </a>
    </div>

    <!-- Task List Section -->
    <div class="row g-4">
        @foreach (var item in Model.OrderBy(t => t.IsCompleted).ThenBy(t => t.DueDate))
        {
            <div class="col-12">
                <div class="card task-card border-0 shadow-sm @(item.IsCompleted ? "completed-task" : "")">
                    <div class="card-body d-flex align-items-center py-3">
                        <!-- Checkbox -->
                        <div class="me-3">
                            <input type="checkbox" 
                                   class="form-check-input task-checkbox task-status" 
                                   data-task-id="@item.Id" 
                                   @(item.IsCompleted ? "checked" : "")>
                        </div>

                        <!-- Task Info -->
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-1">
                                <a asp-action="Details" asp-route-id="@item.Id" class="task-title h5 mb-0">
                                    @item.Title
                                </a>
                                <span class="badge rounded-pill @(item.IsCompleted ? "bg-success" : "bg-primary") status-badge ms-2">
                                    @(item.IsCompleted ? "Completed" : "Active")
                                </span>
                            </div>
                            <div class="text-muted small">
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <span class="me-3" style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden;">
                                        <i class="bi bi-card-text me-1"></i>@item.Description
                                    </span>
                                }
                                <span class="due-date @(item.DueDate.Date < DateTime.Today ? "overdue" : item.DueDate.Date <= DateTime.Today.AddDays(3) ? "upcoming" : "")">
                                    <i class="bi bi-calendar-event me-1"></i>Due @item.DueDate.ToString("MMM dd, yyyy")
                                </span>
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="task-actions">
                            <div class="btn-group">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-info-circle"></i>
                                </a>
                                <button type="button" 
                                        class="btn btn-outline-danger btn-sm"
                                        data-bs-toggle="modal" 
                                        data-bs-target="#deleteModal" 
                                        data-task-id="@item.Id"
                                        data-task-title="@item.Title">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (!Model.Any())
        {
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-clipboard-check text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">No Tasks Yet</h5>
                        <p class="text-muted mb-3">Get started by creating your first task</p>
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-lg me-2"></i>Create Task
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                <h5 class="mt-3">Are you sure?</h5>
                <p class="text-muted mb-0">Do you want to delete task: <strong><span id="taskTitle"></span></strong>?</p>
            </div>
            <div class="modal-footer border-0">
                <form asp-action="Delete" id="deleteForm">
                    <input type="hidden" name="id" id="taskId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-2"></i>Delete Task
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle task status toggle with animation
        $('.task-status').change(function() {
            const checkbox = $(this);
            const taskId = checkbox.data('task-id');
            const card = checkbox.closest('.task-card');
            
            card.css('opacity', '0.5');
            
            $.post(`/TodoTask/ToggleStatus/${taskId}`)
                .done(function(response) {
                    if (response.success) {
                        card.toggleClass('completed-task');
                        card.css('opacity', '1');
                        
                        // Update the status badge
                        const badge = card.find('.status-badge');
                        if (checkbox.prop('checked')) {
                            badge.removeClass('bg-primary').addClass('bg-success').text('Completed');
                        } else {
                            badge.removeClass('bg-success').addClass('bg-primary').text('Active');
                        }
                    } else {
                        checkbox.prop('checked', !checkbox.prop('checked'));
                        card.css('opacity', '1');
                        showToast('Failed to update task status', 'danger');
                    }
                })
                .fail(function() {
                    checkbox.prop('checked', !checkbox.prop('checked'));
                    card.css('opacity', '1');
                    showToast('Failed to update task status', 'danger');
                });
        });

        // Handle delete modal
        $('#deleteModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget);
            const taskId = button.data('task-id');
            const taskTitle = button.data('task-title');
            
            const modal = $(this);
            modal.find('#taskId').val(taskId);
            modal.find('#taskTitle').text(taskTitle);
        });

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = $(`
                <div class="toast position-fixed bottom-0 end-0 m-3" role="alert">
                    <div class="toast-header bg-${type} text-white">
                        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                        <strong class="me-auto">Task Manager</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `);
            
            $('body').append(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.on('hidden.bs.toast', function () {
                toast.remove();
            });
        }
    </script>
}

================
File: Views/_ViewImports.cshtml
================
@using TaskManager.Web
@using TaskManager.Web.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

================
File: Views/_ViewStart.cshtml
================
@{
    Layout = "_Layout";
}

================
File: wwwroot/css/site.css
================
/* Global Styles */
html {
    position: relative;
    min-height: 100%;
}

body {
    margin-bottom: 60px;
    background-color: var(--bs-body-bg, #f8f9fa);
    color: var(--bs-body-color);
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* Light mode defaults */
:root {
    --bs-body-bg: #f8f9fa;
    --bs-body-color: #212529;
    --bs-border-color: #dee2e6;
}

/* Dark mode overrides */
[data-bs-theme="dark"] {
    --bs-body-bg: #121212;
    --bs-body-color: #e0e0e0;
    --bs-border-color: #2d2d2d;
}

[data-bs-theme="dark"] .navbar {
    background-color: #1a1a1a !important;
}

[data-bs-theme="dark"] .card {
    background-color: #1a1a1a;
    border-color: #2d2d2d;
}

[data-bs-theme="dark"] .form-control {
    background-color: #2d2d2d;
    border-color: #404040;
    color: #e0e0e0;
}

[data-bs-theme="dark"] .form-control:focus {
    background-color: #2d2d2d;
    border-color: #0d6efd;
    color: #e0e0e0;
}

[data-bs-theme="dark"] .btn-outline-secondary {
    color: #e0e0e0;
    border-color: #404040;
}

[data-bs-theme="dark"] .modal-content {
    background-color: #1a1a1a;
}

[data-bs-theme="dark"] .task-title {
    color: #e0e0e0;
}

[data-bs-theme="dark"] .completed-task .task-title {
    color: #6c757d;
}

[data-bs-theme="dark"] .form-floating > label {
    color: #999;
}

[data-bs-theme="dark"] .form-section {
    background-color: #1a1a1a;
}

[data-bs-theme="dark"] .text-muted {
    color: #999 !important;
}

/* Theme toggle button styles */
.theme-toggle {
    padding: 0.5rem;
    border-radius: 0.5rem;
    border: none;
    background: transparent;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
}

.theme-toggle:hover {
    background-color: rgba(0, 0, 0, 0.1);
}

[data-bs-theme="dark"] .theme-toggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

/* Smooth transition for theme changes */
.card, .navbar, .modal-content, .form-control {
    transition: background-color 0.3s ease, border-color 0.3s ease;
}

/* Footer Styles */
.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    white-space: nowrap;
    line-height: 60px;
    background-color: var(--bs-body-bg);
    border-color: var(--bs-border-color);
}

/* Task List Styles */
.table td {
    vertical-align: middle;
}

.task-status {
    cursor: pointer;
}

.table tr:hover {
    background-color: rgba(0, 0, 0, 0.03);
}

/* Card Styles */
.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: none;
    background-color: var(--bs-body-bg);
}

.card-header {
    background-color: inherit;
    border-bottom: 1px solid var(--bs-border-color);
}

/* Form Styles */
.form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* Button Styles */
.btn-group {
    gap: 0.5rem;
}

.btn-outline-primary:hover, 
.btn-outline-danger:hover {
    transform: translateY(-1px);
    transition: transform 0.2s;
}

/* Alert Styles */
.alert {
    margin-top: 1rem;
    margin-bottom: 1rem;
}

/* Modal Styles */
.modal-content {
    border: none;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    background-color: var(--bs-body-bg);
}

/* Due Date Indicator */
.due-date {
    font-size: 0.875rem;
}

.due-date.overdue {
    color: #dc3545;
}

.due-date.upcoming {
    color: #ffc107;
}

/* Task Status Badge */
.badge {
    font-weight: 500;
    padding: 0.5em 1em;
}

================
File: wwwroot/js/site.js
================
// Handle task status toggle with animation
function handleTaskStatusToggle() {
    $('.task-status').change(function() {
        const checkbox = $(this);
        const taskId = checkbox.data('task-id');
        const row = checkbox.closest('tr');
        
        row.css('opacity', '0.5');
        
        $.post(`/TodoTask/ToggleStatus/${taskId}`)
            .done(function(response) {
                if (response.success) {
                    row.css('opacity', '1');
                } else {
                    checkbox.prop('checked', !checkbox.prop('checked'));
                    row.css('opacity', '1');
                    showAlert('Failed to update task status', 'danger');
                }
            })
            .fail(function() {
                checkbox.prop('checked', !checkbox.prop('checked'));
                row.css('opacity', '1');
                showAlert('Failed to update task status', 'danger');
            });
    });
}

// Show alert message
function showAlert(message, type = 'success') {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    const alertContainer = $('#alert-container');
    if (alertContainer.length) {
        alertContainer.html(alertHtml);
    } else {
        $('main').prepend(`<div id="alert-container">${alertHtml}</div>`);
    }
}

// Update due date formatting
function updateDueDateDisplay() {
    $('.due-date').each(function() {
        const dueDate = new Date($(this).data('date'));
        const today = new Date();
        const diffDays = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
        
        if (diffDays < 0) {
            $(this).addClass('overdue');
        } else if (diffDays <= 3) {
            $(this).addClass('upcoming');
        }
    });
}

// Initialize all tooltips
function initTooltips() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
}

// Document ready handler
$(document).ready(function() {
    handleTaskStatusToggle();
    updateDueDateDisplay();
    initTooltips();
    
    // Auto-hide alerts after 5 seconds
    setTimeout(function() {
        $('.alert').alert('close');
    }, 5000);
});

// Initialize form validation
if ($.validator) {
    $.validator.setDefaults({
        highlight: function(element) {
            $(element).addClass('is-invalid');
        },
        unhighlight: function(element) {
            $(element).removeClass('is-invalid');
        }
    });
}

================
File: wwwroot/js/themeInit.js
================
// Theme initialization
(function() {
    // Check for saved theme preference, otherwise use system preference
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    document.documentElement.setAttribute('data-bs-theme', theme);
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
        if (!localStorage.getItem('theme')) {
            document.documentElement.setAttribute('data-bs-theme', e.matches ? 'dark' : 'light');
        }
    });
})();

================
File: wwwroot/js/themeToggle.js
================
'use strict';

const ThemeToggle = () => {
    const [isDark, setIsDark] = React.useState(false);

    React.useEffect(() => {
        // Check initial theme
        const isDarkMode = document.documentElement.getAttribute('data-bs-theme') === 'dark';
        setIsDark(isDarkMode);

        // Listen for theme changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'data-bs-theme') {
                    const newTheme = document.documentElement.getAttribute('data-bs-theme');
                    setIsDark(newTheme === 'dark');
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });

        return () => observer.disconnect();
    }, []);

    const toggleTheme = () => {
        const newTheme = !isDark ? 'dark' : 'light';
        document.documentElement.setAttribute('data-bs-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    };

    return React.createElement(
        'button',
        {
            onClick: toggleTheme,
            className: 'theme-toggle',
            'aria-label': 'Toggle theme',
            title: isDark ? 'Switch to light mode' : 'Switch to dark mode'
        },
        isDark
            ? React.createElement('i', {
                className: 'bi bi-sun-fill',
                style: { fontSize: '1.25rem', color: '#ffc107' }
              })
            : React.createElement('i', {
                className: 'bi bi-moon-fill',
                style: { fontSize: '1.25rem', color: '#0d6efd' }
              })
    );
};

================
File: Program.cs
================
using Microsoft.EntityFrameworkCore;
using TaskManager.Web.Infrastructure.Data;
using TaskManager.Web.Repositories;
using TaskManager.Web.Repositories.Interfaces;
using TaskManager.Web.Services;
using TaskManager.Web.Services.Interfaces;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Configure SQLite
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register repositories and services
builder.Services.AddScoped<ITodoTaskRepository, TodoTaskRepository>();
builder.Services.AddScoped<ITodoTaskService, TodoTaskService>();

// Configure logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
